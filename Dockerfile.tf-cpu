FROM yi/tflow-gui:latest
 
MAINTAINER Igor Rabkin <igor.rabkin@xiaoyi.com>


#################################################
#     Python 3.6 installations for dev          #
#################################################

ENV PYTHON_VERSION=3.6.8
# If this is called "PIP_VERSION", pip explodes with "ValueError: invalid truth value '<VERSION>'"
ENV PYTHON_PIP_VERSION 19.1.1
# > At the moment, setting "LANG=C" on a Linux system *fundamentally breaks Python 3*, and that's not OK, fixing...
# http://bugs.python.org/issue19846
ENV LANG C.UTF-8

# Ensure local python is preferred over distribution python
ENV PATH /usr/local/bin:$PATH

# Extra dependencies & python installation
RUN apt-get update && apt-get install -y --no-install-recommends \
	tk-dev \
	libpq-dev \
	libssl-dev \
	openssl \
	libffi-dev \
	zlib1g-dev \
	libsqlite3-dev \
	&& rm -rf /var/lib/apt/lists/*

ENV GPG_KEY 0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D

RUN set -ex \
	\
	&& wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz" \
	&& wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc" \
	&& export GNUPGHOME="$(mktemp -d)" \
	&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$GPG_KEY" \
	&& gpg --batch --verify python.tar.xz.asc python.tar.xz \
	&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \
	&& rm -rf "$GNUPGHOME" python.tar.xz.asc \
	&& mkdir -p /usr/src/python \
	&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \
	&& rm python.tar.xz \
	\
	&& cd /usr/src/python \
	&& gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" \
	&& ./configure \
		--build="$gnuArch" \
		--enable-loadable-sqlite-extensions \
		--enable-shared \
		--with-system-expat \
		--with-system-ffi \
		--without-ensurepip \
	&& make -j "$(nproc)" \
	&& make install \
	&& ldconfig \
	\
	&& find /usr/local -depth \
		\( \
			\( -type d -a \( -name test -o -name tests \) \) \
			-o \
			\( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \) \
		\) -exec rm -rf '{}' + \
	&& rm -rf /usr/src/python \
	\
	&& python3 --version

# Make some useful symlinks that are expected to exist
RUN cd /usr/local/bin \
        && ln -s idle3 idle \
	&& ln -s pydoc3 pydoc \
	&& ln -s python3 python \
	&& ln -s /usr/local/bin/python3.6 /usr/bin/python3.6 \
	&& ln -s python3-config python-config

##################################
# Installing PIP and Dependences #
##################################

RUN set -ex; \
	\
	wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \
	\
	python get-pip.py \
		--disable-pip-version-check \
		--no-cache-dir \
		"pip==$PYTHON_PIP_VERSION" \
	; \
	pip --version; \
	\
	find /usr/local -depth \
		\( \
			\( -type d -a \( -name test -o -name tests \) \) \
			-o \
			\( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \) \
		\) -exec rm -rf '{}' +; \
	rm -f get-pip.py


##################################################################
#              Pick up some TF dependencies                      #
##################################################################

RUN apt-get update && apt-get install -y --no-install-recommends \
    libfreetype6-dev \
    libpng12-dev \
    libzmq3-dev \
    libcurl3-dev \
    libgoogle-perftools-dev \
    zlib1g-dev \
    pkg-config \
    python3-tk && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* 

RUN python -m pip --no-cache-dir install \ 
    Pillow \
    toposort \
    networkx \
    pytest \
    ipykernel \
    jupyter \
    matplotlib \
    numpy \
    pandas \
    scipy \
    sklearn \
    tensorlayer \
    scikit-learn \
    tqdm \
    click==6.7 \
    more_itertools \
    utils \
    bs4 \
    opencv-python \
    python3-utils \
    scikit-image \
    xmltodict \
    easydict \
    tflearn \
    pymongo \
    sacred \
    tables \
    keras-applications \
    keras-preprocessing \
    glances \
    gpustat \
    texttable \
    albumentations \
    urllib3==1.21.1 && \
    python -m ipykernel.kernelspec && \
    apt-get clean && \ 
    rm -rf /var/lib/apt/lists/*


################################################################## 
#              Installing XIAOYI Packages                        #
##################################################################

ARG INSTALL_DIR=/root/.pip
RUN if [ ! -d "$INSTALL_DIR" ]; then mkdir -p $INSTALL_DIR; fi
COPY pip.conf $INSTALL_DIR
RUN pip install xiaoyi --upgrade &&\
    apt-get clean && \ 
    rm -rf /var/lib/apt/lists/*


###################################
# Install TensorFlow CPU version. #
###################################

ARG FILE_NAME=tf_nightly-1.14.1.dev20190523-cp36-cp36m-manylinux1_x86_64.whl

RUN curl -OSL ftp://jenkins-cloud/pub/CPU/${FILE_NAME} -o ${FILE_NAME} && \
    pip --no-cache-dir install --upgrade ${FILE_NAME} && \
    rm -f ${FILE_NAME}  

  
################ INTEL MKL SUPPORT #################

ENV LIBRARY_PATH=/usr/local/lib:$LIBRARY_PATH
ENV LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
RUN cd /usr/local/lib && \
    curl -OSL ftp://jenkins-cloud/pub/LIB/libiomp5.so -o libiomp5.so && \
    curl -OSL ftp://jenkins-cloud/pub/LIB/libmklml_gnu.so -o libmklml_gnu.so && \
    curl -OSL ftp://jenkins-cloud/pub/LIB/libmklml_intel.so -o libmklml_intel.so

####################################################
